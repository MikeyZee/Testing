{"version":3,"sources":["../../src/core/Translator.test.js"],"names":["Core","require","russian","english","describe","it","core","locale","expect","translator","translate","toEqual","strings","test","test2","who","Symbol","translateArray","fileName","smart_count"],"mappings":"AAAA,IAAMA,OAAOC,QAAQ,yBAAR,CAAb;AACA,IAAMC,UAAUD,QAAQ,yBAAR,CAAhB;AACA,IAAME,UAAUF,QAAQ,yBAAR,CAAhB;;AAEAG,SAAS,iBAAT,EAA4B,YAAM;AAChCA,WAAS,WAAT,EAAsB,YAAM;AAC1BC,OAAG,2BAAH,EAAgC,YAAM;AACpC,UAAMC,OAAO,IAAIN,IAAJ,CAAS,EAAEO,QAAQL,OAAV,EAAT,CAAb;AACAM,aAAOF,KAAKG,UAAL,CAAgBC,SAAhB,CAA0B,YAA1B,CAAP,EAAgDC,OAAhD,CAAwD,eAAxD;AACD,KAHD;;AAKAN,OAAG,oDAAH,EAAyD,YAAM;AAC7D,UAAMC,OAAO,IAAIN,IAAJ,CAAS;AACpBO,gBAAQ;AACNK,mBAAS;AACPC,kBAAM,eADC;AAEPC,mBAAO;AAFA;AADH;AADY,OAAT,CAAb;;AASA,UAAMC,MAAMC,OAAO,KAAP,CAAZ;AACAR,aAAOF,KAAKG,UAAL,CAAgBQ,cAAhB,CAA+B,MAA/B,EAAuC,EAAEF,KAAKA,GAAP,EAAvC,CAAP,EAA6DJ,OAA7D,CAAqE,CAAC,QAAD,EAAWI,GAAX,EAAgB,GAAhB,CAArE;AACA;AACAP,aAAOF,KAAKG,UAAL,CAAgBQ,cAAhB,CAA+B,OAA/B,EAAwC,EAAEF,KAAKA,GAAP,EAAxC,CAAP,EAA8DJ,OAA9D,CAAsE,CAAC,QAAD,EAAWI,GAAX,CAAtE;AACD,KAdD;AAeD,GArBD;;AAuBAX,WAAS,eAAT,EAA0B,YAAM;AAC9BC,OAAG,6BAAH,EAAkC,YAAM;AACtC,UAAMC,OAAO,IAAIN,IAAJ,CAAS,EAAEO,QAAQJ,OAAV,EAAT,CAAb;AACAK,aACEF,KAAKG,UAAL,CAAgBC,SAAhB,CAA0B,eAA1B,EAA2C,EAAEQ,UAAU,SAAZ,EAA3C,CADF,EAEEP,OAFF,CAEU,0BAFV;AAGD,KALD;AAMD,GAPD;;AASAP,WAAS,eAAT,EAA0B,YAAM;AAC9BC,OAAG,2BAAH,EAAgC,YAAM;AACpC,UAAMC,OAAO,IAAIN,IAAJ,CAAS,EAAEO,QAAQL,OAAV,EAAT,CAAb;AACAM,aACEF,KAAKG,UAAL,CAAgBC,SAAhB,CAA0B,aAA1B,EAAyC,EAAES,aAAa,EAAf,EAAzC,CADF,EAEER,OAFF,CAEU,mBAFV;;AAIAH,aACEF,KAAKG,UAAL,CAAgBC,SAAhB,CAA0B,aAA1B,EAAyC,EAAES,aAAa,CAAf,EAAzC,CADF,EAEER,OAFF,CAEU,eAFV;;AAIAH,aACEF,KAAKG,UAAL,CAAgBC,SAAhB,CAA0B,aAA1B,EAAyC,EAAES,aAAa,CAAf,EAAzC,CADF,EAEER,OAFF,CAEU,kBAFV;AAGD,KAbD;AAcD,GAfD;AAgBD,CAjDD","file":"Translator.test.js","sourcesContent":["const Core = require('../../src/core/index.js')\nconst russian = require('../../src/locales/ru_RU')\nconst english = require('../../src/locales/en_US')\n\ndescribe('core/translator', () => {\n  describe('translate', () => {\n    it('should translate a string', () => {\n      const core = new Core({ locale: russian })\n      expect(core.translator.translate('chooseFile')).toEqual('Выберите файл')\n    })\n\n    it('should translate a string with non-string elements', () => {\n      const core = new Core({\n        locale: {\n          strings: {\n            test: 'Hello %{who}!',\n            test2: 'Hello %{who}'\n          }\n        }\n      })\n\n      const who = Symbol('who')\n      expect(core.translator.translateArray('test', { who: who })).toEqual(['Hello ', who, '!'])\n      // No empty string at the end.\n      expect(core.translator.translateArray('test2', { who: who })).toEqual(['Hello ', who])\n    })\n  })\n\n  describe('interpolation', () => {\n    it('should interpolate a string', () => {\n      const core = new Core({ locale: english })\n      expect(\n        core.translator.translate('youHaveChosen', { fileName: 'img.jpg' })\n      ).toEqual('You have chosen: img.jpg')\n    })\n  })\n\n  describe('pluralization', () => {\n    it('should translate a string', () => {\n      const core = new Core({ locale: russian })\n      expect(\n        core.translator.translate('filesChosen', { smart_count: 18 })\n      ).toEqual('Выбрано 18 файлов')\n\n      expect(\n        core.translator.translate('filesChosen', { smart_count: 1 })\n      ).toEqual('Выбран 1 файл')\n\n      expect(\n        core.translator.translate('filesChosen', { smart_count: 0 })\n      ).toEqual('Выбрано 0 файлов')\n    })\n  })\n})\n"]}