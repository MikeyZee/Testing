{"version":3,"sources":["../../src/server/RequestClient.js"],"names":["require","stripSlash","url","replace","module","exports","uppy","opts","onReceiveResponse","bind","response","state","getState","uppyServer","host","headers","has","get","setState","path","fetch","_getUrl","method","defaultHeaders","then","res","json","post","data","body","JSON","stringify","status","Error","statusText","test","hostname","delete","credentials"],"mappings":"AAAA;;;;;;;;AAEAA,QAAQ,cAAR;;AAEA;AACA,SAASC,UAAT,CAAqBC,GAArB,EAA0B;AACxB,SAAOA,IAAIC,OAAJ,CAAY,KAAZ,EAAmB,EAAnB,CAAP;AACD;;AAEDC,OAAOC,OAAP;AACE,yBAAaC,IAAb,EAAmBC,IAAnB,EAAyB;AAAA;;AACvB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACD;;AALH,0BAoBED,iBApBF,8BAoBqBE,QApBrB,EAoB+B;AAC3B,QAAMC,QAAQ,KAAKL,IAAL,CAAUM,QAAV,EAAd;AACA,QAAMC,aAAaF,MAAME,UAAN,IAAoB,EAAvC;AACA,QAAMC,OAAO,KAAKP,IAAL,CAAUO,IAAvB;AACA,QAAMC,UAAUL,SAASK,OAAzB;AACA;AACA,QAAIA,QAAQC,GAAR,CAAY,MAAZ,KAAuBD,QAAQE,GAAR,CAAY,MAAZ,MAAwBJ,WAAWC,IAAX,CAAnD,EAAqE;AAAA;;AACnE,WAAKR,IAAL,CAAUY,QAAV,CAAmB;AACjBL,oBAAY,SAAc,EAAd,EAAkBA,UAAlB,6BACTC,IADS,IACFC,QAAQE,GAAR,CAAY,MAAZ,CADE;AADK,OAAnB;AAKD;AACD,WAAOP,QAAP;AACD,GAlCH;;AAAA,0BAoCEO,GApCF,gBAoCOE,IApCP,EAoCa;AACT,WAAOC,MAAM,KAAKC,OAAL,CAAaF,IAAb,CAAN,EAA0B;AAC/BG,cAAQ,KADuB;AAE/BP,eAAS,KAAKQ;AAFiB,KAA1B;AAIL;AAJK,KAKJC,IALI,CAKC,KAAKhB,iBALN,EAMJgB,IANI,CAMC,UAACC,GAAD;AAAA,aAASA,IAAIC,IAAJ,EAAT;AAAA,KAND,CAAP;AAOD,GA5CH;;AAAA,0BA8CEC,IA9CF,iBA8CQR,IA9CR,EA8CcS,IA9Cd,EA8CoB;AAChB,WAAOR,MAAM,KAAKC,OAAL,CAAaF,IAAb,CAAN,EAA0B;AAC/BG,cAAQ,MADuB;AAE/BP,eAAS,KAAKQ,cAFiB;AAG/BM,YAAMC,KAAKC,SAAL,CAAeH,IAAf;AAHyB,KAA1B,EAKJJ,IALI,CAKC,KAAKhB,iBALN,EAMJgB,IANI,CAMC,UAACC,GAAD,EAAS;AACb,UAAIA,IAAIO,MAAJ,GAAa,GAAb,IAAoBP,IAAIO,MAAJ,GAAa,GAArC,EAA0C;AACxC,cAAM,IAAIC,KAAJ,CAAUR,IAAIS,UAAd,CAAN;AACD;AACD,aAAOT,IAAIC,IAAJ,EAAP;AACD,KAXI,CAAP;AAYD,GA3DH;;AAAA,0BA6DEL,OA7DF,oBA6DWnB,GA7DX,EA6DgB;AACZ,QAAI,kBAAkBiC,IAAlB,CAAuBjC,GAAvB,CAAJ,EAAiC;AAC/B,aAAOA,GAAP;AACD;AACD,WAAU,KAAKkC,QAAf,SAA2BlC,GAA3B;AACD,GAlEH;;AAAA,0BAoEEmC,MApEF,oBAoEUlB,IApEV,EAoEgBS,IApEhB,EAoEsB;AAClB,WAAOR,MAAS,KAAKgB,QAAd,SAA0BjB,IAA1B,EAAkC;AACvCG,cAAQ,QAD+B;AAEvCgB,mBAAa,SAF0B;AAGvCvB,eAAS;AACP,kBAAU,kBADH;AAEP,wBAAgB;AAFT,OAH8B;AAOvCc,YAAMD,OAAOE,KAAKC,SAAL,CAAeH,IAAf,CAAP,GAA8B;AAPG,KAAlC,EASJJ,IATI,CASC,KAAKhB,iBATN;AAUL;AAVK,KAWJgB,IAXI,CAWC,UAACC,GAAD;AAAA,aAASA,IAAIC,IAAJ,EAAT;AAAA,KAXD,CAAP;AAYD,GAjFH;;AAAA;AAAA;AAAA,wBAOkB;AAAA,2BACS,KAAKpB,IAAL,CAAUM,QAAV,EADT;AAAA,UACNC,UADM,kBACNA,UADM;;AAEd,UAAMC,OAAO,KAAKP,IAAL,CAAUO,IAAvB;AACA,aAAOb,WAAWY,cAAcA,WAAWC,IAAX,CAAd,GAAiCD,WAAWC,IAAX,CAAjC,GAAoDA,IAA/D,CAAP;AACD;AAXH;AAAA;AAAA,wBAawB;AACpB,aAAO;AACL,kBAAU,kBADL;AAEL,wBAAgB;AAFX,OAAP;AAID;AAlBH;;AAAA;AAAA","file":"RequestClient.js","sourcesContent":["'use strict'\n\nrequire('whatwg-fetch')\n\n// Remove the trailing slash so we can always safely append /xyz.\nfunction stripSlash (url) {\n  return url.replace(/\\/$/, '')\n}\n\nmodule.exports = class RequestClient {\n  constructor (uppy, opts) {\n    this.uppy = uppy\n    this.opts = opts\n    this.onReceiveResponse = this.onReceiveResponse.bind(this)\n  }\n\n  get hostname () {\n    const { uppyServer } = this.uppy.getState()\n    const host = this.opts.host\n    return stripSlash(uppyServer && uppyServer[host] ? uppyServer[host] : host)\n  }\n\n  get defaultHeaders () {\n    return {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }\n\n  onReceiveResponse (response) {\n    const state = this.uppy.getState()\n    const uppyServer = state.uppyServer || {}\n    const host = this.opts.host\n    const headers = response.headers\n    // Store the self-identified domain name for the uppy-server we just hit.\n    if (headers.has('i-am') && headers.get('i-am') !== uppyServer[host]) {\n      this.uppy.setState({\n        uppyServer: Object.assign({}, uppyServer, {\n          [host]: headers.get('i-am')\n        })\n      })\n    }\n    return response\n  }\n\n  get (path) {\n    return fetch(this._getUrl(path), {\n      method: 'get',\n      headers: this.defaultHeaders\n    })\n      // @todo validate response status before calling json\n      .then(this.onReceiveResponse)\n      .then((res) => res.json())\n  }\n\n  post (path, data) {\n    return fetch(this._getUrl(path), {\n      method: 'post',\n      headers: this.defaultHeaders,\n      body: JSON.stringify(data)\n    })\n      .then(this.onReceiveResponse)\n      .then((res) => {\n        if (res.status < 200 || res.status > 300) {\n          throw new Error(res.statusText)\n        }\n        return res.json()\n      })\n  }\n\n  _getUrl (url) {\n    if (/^(https?:|)\\/\\//.test(url)) {\n      return url\n    }\n    return `${this.hostname}/${url}`\n  }\n\n  delete (path, data) {\n    return fetch(`${this.hostname}/${path}`, {\n      method: 'delete',\n      credentials: 'include',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: data ? JSON.stringify(data) : null\n    })\n      .then(this.onReceiveResponse)\n      // @todo validate response status before calling json\n      .then((res) => res.json())\n  }\n}\n"]}